import os
import aiohttp
import random
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')

if os.path.exists(dotenv_path):
    a = load_dotenv(dotenv_path)
token = os.getenv('TOKEN')
bot = Bot(token=token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ù–∞–Ω–æ—Ç–µ—Ö')
    item2 = types.KeyboardButton('–ò–ò')
    markup.add(item1, item2)

    await bot.send_message(message.chat.id,
                           "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1}</b>, –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º.".format(message.from_user,
                                                                                            bot.get('first_name')),
                           parse_mode='html', reply_markup=markup)
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å')

@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")


@dp.message_handler()
async def say(message: types.Message):
    if message.chat.type == 'private':
        if message.text == '–ù–∞–Ω–æ—Ç–µ—Ö':
            await bot.send_message(message.chat.id,'–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å–∞–π—Ç—ã:')
            # await bot.send_message(message.chat.id, str(random.randint(0, 100)))
        elif message.text == '–ò–ò':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("–•–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='bad')

            markup.add(item1, item2)

            await bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫?', reply_markup=markup)
        else:
            await bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                await bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ')
            elif call.data == 'bad':
                await bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç')

            await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id,
                                        text="",
                                        reply_markup=None)

            await bot.answer_callback_query(callback_query_id=call.id, show_alert=False,
                                            text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")

    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
