import os
import db
from parser import Parser
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, executor, types

dotenv_path = os.path.join(os.path.dirname(__file__), '.env')

if os.path.exists(dotenv_path):
    a = load_dotenv(dotenv_path)
token = os.getenv('TOKEN')
bot = Bot(token=token)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton('–ù–∞–Ω–æ—Ç–µ—Ö')
    item2 = types.KeyboardButton('–ò–ò')
    markup.add(item1, item2)

    await bot.send_message(message.chat.id,
                           "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1}</b>, –±–æ—Ç-–ø–∞—Ä—Å–µ—Ä –Ω–æ–≤–æ—Å—Ç–Ω—ã—Ö —Å–∞–π—Ç–æ–≤ –ø–æ —Ç–µ–º–∞–º.".format(
                               message.from_user,
                               bot.get('first_name')),
                           parse_mode='html',
                           reply_markup=markup)
    if not db.isset_user(message.from_user.id):
        db.insert('users', {'id': message.from_user.id, 'name': message.from_user.first_name})
    await bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å')


@dp.message_handler(commands=['help'])
async def process_help_command(message: types.Message):
    await message.reply("–ù–∞–ø–∏—à–∏ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–ø—Ä–ø–∞–≤–ª—é —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ç–µ–±–µ –≤ –æ—Ç–≤–µ—Ç!")


@dp.message_handler()
async def say(message: types.Message):
    parser = Parser()
    if message.chat.type == 'private':
        if message.text == '–ù–∞–Ω–æ—Ç–µ—Ö':

            await method_name(message, Parser.URL_MECHATRONICS, parser.parse_mechatronics)
        elif message.text == '–ò–ò':
            await method_name(message, Parser.URL_GOOGLE_BLOG, parser.parse_google_blog)
        else:
            await bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üò¢')


async def method_name(message, url: str, parse_method):
    await bot.send_message(message.chat.id, '–æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã: ' + '\n' + url + '\n')
    item = types.InlineKeyboardButton("–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–Ω–∏–µ?", callback_data='stop')
    markup = types.InlineKeyboardMarkup(row_width=1)
    markup.add(item)
    await bot.send_message(message.chat.id, '–ø–æ—Å–ª–µ–¥–Ω—è—è –Ω–æ–≤–æ—Å—Ç—å: ' + '\n' + parse_method() + '\n',
                           reply_markup=markup)


@dp.callback_query_handler(lambda call: True)
async def callback_inline(call):
    try:
        if call.message:
            if call.data == 'stop':
                await bot.send_message(call.message.chat.id, '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ')

            await bot.edit_message_text(chat_id=call.message.chat.id,
                                        message_id=call.message.message_id,
                                        text="",
                                        reply_markup=None)

            await bot.answer_callback_query(callback_query_id=call.id,
                                            show_alert=False,
                                            text="–≠–¢–û –¢–ï–°–¢–û–í–û–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–ï!")

    except Exception as e:
        print(repr(e))


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
